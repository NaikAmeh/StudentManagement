# --- General ---
.DS_Store
Thumbs.db
*.swp
*.swo
*~
*.bak
*.tmp

# --- IDEs ---
# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/

# JetBrains (IntelliJ, Rider, WebStorm, etc.)
.idea/
*.iml

# Visual Studio
.vs/
*.suo
*.user
*.userosscache
*.sln.docstates

# --- Build Artifacts & Logs (general, can be more specific in sub-folders) ---
**/[Bb]in/
**/[Oo]bj/
**/[Dd]ebug/
**/[Rr]elease/
**/[Pp]ublish/
*.log
logs/
*.pid
*.seed
*.pid.lock

# --- Dependencies (can be more specific in sub-folders) ---
**/node_modules/
**/packages/ # Older NuGet style

# --- Environment Files ---
# Generally, only commit .env.example or similar templates
#.env
#.env.*
!.env.example
!.env.sample
# Specifically ignore the one generated by our postCreateCommand
#frontend/.env.development.local

# --- Docker ---
# If you ever use docker-compose.override.yml for local settings
#docker-compose.override.yml
#docker-compose.override.yaml

# --- GitHub Codespaces ---
# Codespaces may create some local cache or state files, though generally minimal.
# The .devcontainer folder itself SHOULD be committed.
# If Codespaces generates files *outside* .devcontainer that are specific to an instance:
.codespaces/
core.*

# --- MySQL data (if you were to accidentally map it into the project root) ---
# The docker-compose.yml uses a named volume, so this is just a precaution.
mysql_data/

# --- Test Results ---
**/TestResults/
*.trx
coverage/
*.cover
*.codecov.yml

# Node
node_modules/
frontend/node_modules/ # If npm install is run outside container before volume mount
frontend/dist/
frontend/build/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# .NET
bin/
obj/
**/bin/
**/obj/
Properties/launchSettings.json # Usually machine/user specific
*.user
*.suo

# Rider / IntelliJ
.idea/

# VS Code
.vscode/ # Except for .devcontainer/ and potentially launch.json/tasks.json if shared

# Environment files
.env # IMPORTANT: Contains secrets!
*.env.local
*.env.*.local

# Docker
uploads/* # If you don't want to commit test uploads
!uploads/.gitkeep # To keep the folder if it's empty but needs to be in git
mysql_data/ # If you were to mount MySQL data to a local dir instead of named volume

# Logs
logs/
*.log

# OS generated files
.DS_Store
Thumbs.db

# Exclude build and debug directories
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio files
.vs/
.vscode/
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.tlog
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# SQL Server files
*.mdf
*.ldf
*.ndf

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.pfx
*.publishsettings
orleans.codegen.cs

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# Local History for Visual Studio
.localhistory/

# JetBrains Rider
.idea/
*.sln.iml

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# macOS
.DS_Store