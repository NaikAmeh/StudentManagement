{
  "name": "My .NET Core + React App",
  "dockerComposeFile": "docker-compose.yml",
  "service": "app", // The name of your app service in docker-compose.yml
  "workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",

  // Ports your application listens on. Codespaces will dynamically forward them.
  "forwardPorts": [
    // Common .NET backend ports (adjust if your backend uses different ones)
    5000, // HTTP
    5001, // HTTPS
    // React development server port
    3000,
    // MySQL port (forwarded from the 'db' service if you need to connect with an external tool)
    // Not strictly necessary for app-to-db communication, but useful for inspection.
    3306 
  ],

  // Label forwarded ports in the VS Code UI for clarity
  "portsAttributes": {
    "5000": { "label": "Backend API (HTTP)" },
    "5001": { "label": "Backend API (HTTPS)" },
    "3000": { "label": "Frontend (React Dev)" },
    "3306": { "label": "MySQL Database" }
  },

  // Lifecycle scripts
  "postCreateCommand": "bash .devcontainer/postCreateCommands.sh",
  // "postAttachCommand": "", // Runs every time you attach to the Codespace

  "customizations": {
    "vscode": {
      "settings": {
        "terminal.integrated.shell.linux": "/bin/bash"
        // Add any default VS Code settings you want
      },
      "extensions": [
        "ms-dotnettools.csharp",
        "ms-vscode.vscode-node-azure-pack", // Good general Node.js pack
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode",
        "ms-azuretools.vscode-docker",
        "GitHub.copilot", // If you use Copilot
        "GitHub.codespaces", // Usually pre-installed
        "cweijan.vscode-mysql-client2" // A MySQL client for VS Code
      ]
    }
  },

  // Use 'postCreateCommand' to run commands after the container is created.
  // Use 'postStartCommand' to run commands after the container is created and started.
  // Use 'postAttachCommand' to run commands after VS Code attaches to the container.

  "remoteUser": "vscode" // Ensure we run as the non-root user defined in Dockerfile
}